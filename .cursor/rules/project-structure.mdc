---
description: project-structure
globs: 
alwaysApply: false
---
# Project Structure & Organization

Bu proje modern Next.js App Router architecture kullanır. Kod organizasyonu, maintainability ve scalability için optimize edilmiştir.

## Core Library Structure ([lib/](mdc:lib))

### Main Export Hub ([lib/index.ts](mdc:lib/index.ts))
- Tüm lib exports'ların merkezi
- Selective exports to avoid conflicts
- Legacy compatibility functions
- Clean public API

```typescript
// Modern exports
export * from "./constants";
export * from "./types";
export { useAuth, useLogin, useLogout } from "./hooks/useAuth";
```

### Constants Management ([lib/constants.ts](mdc:lib/constants.ts))
- API endpoints
- Permission definitions
- Error/Success messages
- Cache configuration
- UI constants

```typescript
export const API_ENDPOINTS = {
  AUTH_LOGIN: "/api/auth/login",
  ADMIN_USERS: "/api/admin/users",
  // ...
};

export const PERMISSIONS = {
  LAYOUT_ADMIN_ACCESS: "layout.admin.access",
  // ...
};
```

### Type Definitions ([lib/types.ts](mdc:lib/types.ts))
- API response types
- User and auth types
- Form data types
- UI state types
- Component prop types

```typescript
export interface SimpleUser {
  id: string;
  name: string | null;
  email: string | null;
  permissions: string[];
  // ...
}
```

## State Management Structure

### Stores Directory ([lib/stores/](mdc:lib/stores))
- **auth-store.ts**: Authentication state with Zustand
- **ui-store.ts**: UI state (modals, notifications, loading)

### Hooks Directory ([lib/hooks/](mdc:lib/hooks))
- **useAuth.ts**: Authentication hooks with TanStack Query
- **useUsers.ts**: User management hooks

## API & Network Layer

### API Client ([lib/api-client.ts](mdc:lib/api-client.ts))
- Modern API client class
- Organized API functions (authAPI, usersAPI, rolesAPI)
- Query key factories
- Error handling utilities

### Query Provider ([lib/providers/query-provider.tsx](mdc:lib/providers/query-provider.tsx))
- TanStack Query configuration
- Global error handling
- Cache management utilities
- Development tools integration

## Utilities & Helpers

### Core Utilities ([lib/utils.ts](mdc:lib/utils.ts))
- Tailwind CSS class merging (`cn` function)
- Common utility functions

### Crypto Utilities ([lib/crypto.ts](mdc:lib/crypto.ts))
- Password hashing with PBKDF2
- Secure password verification
- Modern Web Crypto API usage

### Session Management ([lib/session-utils.ts](mdc:lib/session-utils.ts))
- Server-side session utilities
- Token validation
- User authentication helpers

### Database Connection ([lib/prisma.ts](mdc:lib/prisma.ts))
- PrismaClient singleton
- Development hot-reload protection

## Package Dependencies ([package.json](mdc:package.json))

### Core Framework
- **Next.js 15.3.1**: App Router with latest features
- **React 19**: Latest React with concurrent features
- **TypeScript 5**: Type safety

### State Management
- **Zustand 5.0.2**: Lightweight state management
- **TanStack Query 5.66.1**: Server state management
- **React Hook Form 7.56.1**: Form state management

### UI Framework
- **Tailwind CSS 4.1.5**: Utility-first CSS
- **Radix UI**: Accessible component primitives
- **Framer Motion 12.18.1**: Animation library

### Internationalization
- **next-intl 4.1.0**: i18n for Next.js

### Database & Auth
- **Prisma 6.9.0**: Database ORM
- **Iron Session 8.0.4**: Session management
- **JOSE 6.0.11**: JWT utilities

## File Naming Conventions

### Component Files
```
ComponentName.tsx          # React components
ComponentName.client.tsx   # Client components
ComponentName.server.tsx   # Server components
```

### Hook Files
```
useHookName.ts            # Custom hooks
useFeatureName.ts         # Feature-specific hooks
```

### Utility Files
```
feature-utils.ts          # Feature utilities
helper-functions.ts       # Helper functions
```

### Type Files
```
types.ts                  # Main types
feature-types.ts          # Feature-specific types
```

## Directory Organization Patterns

### Feature-Based Structure
```
feature/
├── components/           # Feature components
├── hooks/               # Feature hooks
├── types/               # Feature types
├── utils/               # Feature utilities
└── index.ts            # Feature exports
```

### Layer-Based Structure (lib)
```
lib/
├── api-client.ts        # API layer
├── stores/              # State layer
├── hooks/               # Hook layer
├── types.ts             # Type layer
├── constants.ts         # Configuration layer
└── utils.ts            # Utility layer
```

## Import/Export Patterns

### Barrel Exports
```typescript
// lib/index.ts - Main barrel export
export * from "./constants";
export * from "./types";
export { useAuth } from "./hooks/useAuth";
```

### Named Exports
```typescript
// Prefer named exports over default exports
export const useAuth = () => { /* ... */ };
export const API_ENDPOINTS = { /* ... */ };
```

### Import Organization
```typescript
// 1. External libraries
import React from 'react';
import { useQuery } from '@tanstack/react-query';

// 2. Internal utilities
import { cn } from '@/lib/utils';
import { useAuth } from '@/lib/hooks/useAuth';

// 3. Relative imports
import './component.css';
```

## Configuration Files

### TypeScript Configuration
- **tsconfig.json**: TypeScript compiler options
- Path mapping for clean imports
- Strict type checking enabled

### Tailwind Configuration
- **tailwind.config.ts**: Tailwind CSS configuration
- Custom design system
- Plugin integrations

### ESLint Configuration
- **eslint.config.mjs**: Modern ESLint configuration
- Next.js specific rules
- TypeScript integration

## Best Practices

### 1. File Organization
- Group related files together
- Use consistent naming conventions
- Implement barrel exports for clean imports
- Separate concerns by layer

### 2. Import Management
- Use absolute imports with path mapping
- Organize imports by source (external, internal, relative)
- Prefer named exports over default exports
- Use barrel exports for public APIs

### 3. Code Organization
- Keep files focused and small
- Use composition over inheritance
- Implement proper separation of concerns
- Follow single responsibility principle

### 4. Type Safety
- Define types close to usage
- Use strict TypeScript configuration
- Implement proper error boundaries
- Validate data at boundaries

### 5. Performance
- Implement code splitting
- Use React.lazy for large components
- Optimize bundle size
- Monitor performance metrics

Bu structure, maintainable, scalable ve developer-friendly bir codebase sağlar.

