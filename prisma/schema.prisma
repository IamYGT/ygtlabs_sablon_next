generator client {
  provider        = "prisma-client-js"
  output          = "../node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  schemas  = ["public"]
}

// ==========================
// ENUMS (Standartlaşma)
// ==========================

enum PermissionCategory {
  layout
  view
  function
  @@schema("public")
}

enum PermissionAction {
  access
  view
  create
  read
  update
  delete
  manage
  edit // geçiş dönemi için
  @@schema("public")
}

enum PermissionType {
  admin
  customer
  @@schema("public")
}

enum LayoutType {
  admin
  customer
  @@schema("public")
}

enum SessionType {
  normal
  incognito
  mobile
  @@schema("public")
}

model Session {
  id           String   @id @default(uuid())
  // Token formatı uygulama katmanında doğrulanır; index performans içindir
  sessionToken String   @unique
  userId       String
  expires      DateTime

  // Multi-session support
  tabId             String? // Browser tab identifier
  deviceFingerprint String? // Device fingerprint hash
  sessionType       SessionType  @default(normal)
  parentSessionId   String? // Parent session reference
  sessionGroup      String? // Session group identifier

  // Enhanced metadata
  ipAddress       String?
  userAgent       String?
  location        String?
  deviceInfo      Json?
  sessionMetadata Json? // Extended session info

  // Activity tracking
  lastActive    DateTime @default(now())
  lastHeartbeat DateTime @default(now())
  createdAt     DateTime @default(now())

  // Session state
  isActive      Boolean   @default(true)
  revokedAt     DateTime?
  revokedBy     String?
  revokedReason String?
  loginMethod   String?

  // Concurrent session management
  maxConcurrentSessions Int? @default(10)

  // Relations
  user          User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  parentSession Session?       @relation("SessionHierarchy", fields: [parentSessionId], references: [id], onDelete: SetNull)
  childSessions Session[]      @relation("SessionHierarchy")
  LoginHistory  LoginHistory[]

  @@index([userId])
  @@index([userId, isActive])
  @@index([expires])
  @@index([lastActive])
  @@index([isActive])
  @@index([sessionGroup])
  @@index([tabId])
  @@index([deviceFingerprint])
  @@index([parentSessionId])
  @@schema("public")
}

model User {
  id                     String              @id @default(uuid())
  name                   String?
  email                  String?             @unique
  emailVerified          DateTime?
  profileImage           String?
  password               String
  tokenVersion           Int                 @default(0)
  isActive               Boolean             @default(true)
  lastLoginAt            DateTime?
  failedLoginAttempts    Int                 @default(0)
  resetPasswordToken     String?
  resetPasswordExpires   DateTime?
  createdAt              DateTime            @default(now())
  updatedAt              DateTime            @updatedAt
  roleAssignedAt         DateTime?
  roleAssignedById       String?
  roleId                 String?
  createdRoles           AuthRole[]          @relation("RoleCreatedBy")
  updatedRoles           AuthRole[]          @relation("RoleUpdatedBy")
  sessions               Session[]
  assignedByUser         User?               @relation("RoleAssignedBy", fields: [roleAssignedById], references: [id])
  assignedUsers          User[]              @relation("RoleAssignedBy")
  role                   AuthRole?           @relation("UserRole", fields: [roleId], references: [id])
  activityLogs           UserActivityLog[]
  createdPermissions     Permission[]        @relation("PermissionCreatedBy")
  updatedPermissions     Permission[]        @relation("PermissionUpdatedBy")
  grantedRolePermissions RoleHasPermission[] @relation("RolePermissionGrantedBy")
  createdHeroSliders     HeroSlider[]        @relation("HeroSliderCreatedBy")
  updatedHeroSliders     HeroSlider[]        @relation("HeroSliderUpdatedBy")
  createdInfoArticles    InfoArticle[]       @relation("InfoArticleCreatedBy")
  updatedInfoArticles    InfoArticle[]       @relation("InfoArticleUpdatedBy")
  createdBlogPosts       BlogPost[]          @relation("BlogPostCreatedBy")
  updatedBlogPosts       BlogPost[]          @relation("BlogPostUpdatedBy")
  createdFaqItems        FaqItem[]           @relation("FaqItemCreatedBy")
  updatedFaqItems        FaqItem[]           @relation("FaqItemUpdatedBy")
  createdCustomers       Customer[]          @relation("CustomerCreatedBy")
  updatedCustomers       Customer[]          @relation("CustomerUpdatedBy")
  LoginHistory           LoginHistory[]
  UserStats              UserStats?
  createdAbouts          About[]             @relation("AboutCreatedBy")
  updatedAbouts          About[]             @relation("AboutUpdatedBy")
  
  // Support System Relations
  customerTickets        SupportTicket[]      @relation("CustomerTickets")
  assignedTickets        SupportTicket[]      @relation("AssignedTickets")
  sentMessages           SupportMessage[]     @relation("SentMessages")
  uploadedAttachments    SupportAttachment[]  @relation("UploadedAttachments")
  assignmentTargets      TicketAssignment[]   @relation("AssignmentTarget")
  assignmentCreators     TicketAssignment[]   @relation("AssignmentCreator")
  ticketNotifications    TicketNotification[] @relation("TicketNotifications")

  @@index([roleId])
  @@schema("public")
}

model UserActivityLog {
  id        String   @id @default(uuid())
  userId    String
  action    String
  details   Json?
  ipAddress String?
  userAgent String?
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@schema("public")
}

// Login geçmişi için yeni model
model LoginHistory {
  id              String    @id @default(uuid())
  userId          String
  ipAddress       String?
  userAgent       String?
  location        String?
  deviceInfo      Json?
  loginMethod     String?   @default("password") // password, oauth, etc.
  isSuccessful    Boolean   @default(true)
  failureReason   String?
  sessionId       String?
  loggedInAt      DateTime  @default(now())
  loggedOutAt     DateTime?
  sessionDuration Int? // dakika cinsinden

  // Relations
  user    User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  session Session? @relation(fields: [sessionId], references: [id])

  @@index([userId])
  @@index([loggedInAt])
  @@index([isSuccessful])
  @@schema("public")
}

// Kullanıcı istatistikleri için model
model UserStats {
  id                    String    @id @default(uuid())
  userId                String    @unique
  totalLogins           Int       @default(0)
  lastLoginAt           DateTime?
  profileCompletionRate Int       @default(0) // 0-100 arası
  securityScore         Int       @default(50) // 0-100 arası
  emailVerified         Boolean   @default(false)
  twoFactorEnabled      Boolean   @default(false)
  lastPasswordChange    DateTime?
  passwordStrength      Int       @default(0) // 0-100 arası
  accountAge            Int       @default(0) // gün cinsinden
  lastActivityAt        DateTime?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@schema("public")
}

// Sistem yetkilerini tanımlar
model Permission {
  id             String @id @default(uuid())
  name           String @unique // 'layout.admin.access', 'function.roles.create'
  category       PermissionCategory
  resourcePath   String // 'admin', '/admin/users', 'users'
  action         PermissionAction
  permissionType PermissionType @default(customer) // 'admin', 'customer' - Yetkinin türünü belirtir

  // Çok dilli yetki detayları (JSON)
  displayName Json? // {"tr": "Admin Paneli Erişimi", "en": "Admin Panel Access"}
  description Json? // {"tr": "Admin paneline erişim yetkisi", "en": "Access permission to admin panel"}

  // Durum ve kontrol
  isActive Boolean @default(true) // Yetkinin aktif olup olmadığı

  // Audit trail
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  createdById String? // Yetkiyi oluşturan kullanıcı
  updatedById String? // Yetkiyi güncelleyen kullanıcı

  // Relations
  createdBy       User?               @relation("PermissionCreatedBy", fields: [createdById], references: [id])
  updatedBy       User?               @relation("PermissionUpdatedBy", fields: [updatedById], references: [id])
  rolePermissions RoleHasPermission[]

  @@index([category])
  @@index([resourcePath])
  @@index([permissionType])
  @@index([isActive])
  @@index([category, permissionType])
  @@schema("public")
}

// Roller ve yetkiler arasındaki ilişkiyi yönetir
model RoleHasPermission {
  id             String @id @default(uuid())
  roleName       String
  permissionName String

  // Durum ve kontrol
  isAllowed Boolean @default(true)
  isActive  Boolean @default(true)

  // Şartlar (opsiyonel)
  conditions Json? // Flexible conditions for advanced permissions

  // Audit trail
  grantedAt   DateTime @default(now())
  grantedById String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  role       AuthRole   @relation(fields: [roleName], references: [name], onDelete: Cascade)
  permission Permission @relation(fields: [permissionName], references: [name], onDelete: Cascade)
  grantedBy  User?      @relation("RolePermissionGrantedBy", fields: [grantedById], references: [id])

  @@unique([roleName, permissionName])
  @@index([roleName])
  @@index([permissionName])
  @@index([isActive])
  @@index([roleName, isActive])
  @@schema("public")
}

model AuthRole {
  id              String              @id @default(uuid())
  name            String              @unique
  displayName     String
  description     String?
  color           String?
  isSystemDefault Boolean             @default(false)
  isActive        Boolean             @default(true)
  createdAt       DateTime            @default(now())
  updatedAt       DateTime            @updatedAt
  createdById     String?
  updatedById     String?
  layoutType      LayoutType          @default(customer)
  createdBy       User?               @relation("RoleCreatedBy", fields: [createdById], references: [id])
  updatedBy       User?               @relation("RoleUpdatedBy", fields: [updatedById], references: [id])
  users           User[]              @relation("UserRole")
  rolePermissions RoleHasPermission[]

  @@schema("public")
}

// Hero Slider Yönetimi
model HeroSlider {
  id              String   @id @default(uuid())
  title           Json // {"tr": "Başlık", "en": "Title"}
  subtitle        Json? // {"tr": "Alt başlık", "en": "Subtitle"}
  description     Json // {"tr": "Açıklama", "en": "Description"}
  badge           Json? // {"tr": "Rozet", "en": "Badge"}
  backgroundImage String // Arka plan resmi URL'si
  primaryButton   Json // {"tr": {"text": "Buton", "url": "/link"}, "en": {"text": "Button", "url": "/link"}}
  secondaryButton Json? // {"tr": {"text": "Buton 2", "url": "/link"}, "en": {"text": "Button 2", "url": "/link"}}
  statistics      Json // [{"tr": {"label": "Müşteri", "value": "5K+"}, "en": {"label": "Customers", "value": "5K+"}}]
  isActive        Boolean  @default(true)
  order           Int      @default(0)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  createdById     String?
  updatedById     String?

  // Relations
  createdBy User? @relation("HeroSliderCreatedBy", fields: [createdById], references: [id])
  updatedBy User? @relation("HeroSliderUpdatedBy", fields: [updatedById], references: [id])

  @@index([isActive])
  @@index([order])
  @@unique([order])
  @@schema("public")
}

// Bilgi Merkezi / Knowledge Base içerikleri
model InfoArticle {
  id          String   @id @default(uuid())
  title       Json     // {"tr": "Başlık", "en": "Title"}
  content     Json     // {"tr": "İçerik", "en": "Content"}
  isActive    Boolean  @default(true)
  order       Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  createdById String?
  updatedById String?

  // Relations
  createdBy User? @relation("InfoArticleCreatedBy", fields: [createdById], references: [id])
  updatedBy User? @relation("InfoArticleUpdatedBy", fields: [updatedById], references: [id])

  @@index([isActive])
  @@index([order])
  @@schema("public")
}

// Blog içerikleri
model BlogPost {
  id          String   @id @default(uuid())
  title       Json     // {"tr": "Başlık", "en": "Title"}
  content     Json     // {"tr": "İçerik", "en": "Content"}
  excerpt     Json?
  coverImage  String?
  isActive    Boolean  @default(true)
  order       Int      @default(0)
  publishedAt DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  createdById String?
  updatedById String?

  // Relations
  createdBy User? @relation("BlogPostCreatedBy", fields: [createdById], references: [id])
  updatedBy User? @relation("BlogPostUpdatedBy", fields: [updatedById], references: [id])

  @@index([isActive])
  @@index([order])
  @@index([publishedAt])
  @@schema("public")
}

// Sıkça Sorulan Sorular
model FaqItem {
  id          String   @id @default(uuid())
  question    Json     // {"tr": "Soru", "en": "Question"}
  answer      Json     // {"tr": "Cevap", "en": "Answer"}
  category    String?
  isActive    Boolean  @default(true)
  order       Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  createdById String?
  updatedById String?

  // Relations
  createdBy User? @relation("FaqItemCreatedBy", fields: [createdById], references: [id])
  updatedBy User? @relation("FaqItemUpdatedBy", fields: [updatedById], references: [id])

  @@index([isActive])
  @@index([order])
  @@schema("public")
}

// Müşteri Yönetimi
model Customer {
  id            String   @id @default(uuid())
  name          String
  email         String?  @unique
  phone         String?
  company       String?
  notes         Json?
  isActive      Boolean  @default(true)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  createdById   String?
  updatedById   String?

  // Relations
  createdBy User? @relation("CustomerCreatedBy", fields: [createdById], references: [id])
  updatedBy User? @relation("CustomerUpdatedBy", fields: [updatedById], references: [id])

  @@index([isActive])
  @@index([name])
  @@schema("public")
}

// Hakkımızda sayfası içerikleri
model About {
  id        String   @id @default(uuid())
  about     Json // {"tr": "Hakkımızda", "en": "About Us"}
  mission   Json // {"tr": "Misyonumuz", "en": "Our Mission"}
  vision    Json // {"tr": "Vizyonumuz", "en": "Our Vision"}
  roadmap   Json // {"tr": "Yol Haritası", "en": "Roadmap"}
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  createdById String?
  updatedById String?
  
  // Relations
  createdBy User? @relation("AboutCreatedBy", fields: [createdById], references: [id])
  updatedBy User? @relation("AboutUpdatedBy", fields: [updatedById], references: [id])

  @@schema("public")
}

// Uygulama genelinde aktif dilleri yöneten tablo
model Language {
  id          String   @id @default(uuid())
  code        String   @unique // BCP-47 dil kodu, ör: "en", "tr", "me" veya "cnr"
  name        String            // İngilizce ad: "Turkish", "English", "Montenegrin"
  nativeName  String?           // Yerel ad: "Türkçe", "Crnogorski"
  isActive    Boolean  @default(true)
  isDefault   Boolean  @default(false)
  direction   String?           // "ltr" | "rtl"
  urlPrefix   String?           // Örn: "/tr" - boş ise as-needed kuralı uygulanır
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([isActive])
  @@index([code])
  @@schema("public")
}

// ==========================
// SUPPORT SYSTEM ENUMS
// ==========================

enum TicketStatus {
  open
  pending
  in_progress
  resolved
  closed
  @@schema("public")
}

enum TicketPriority {
  low
  medium
  high
  urgent
  @@schema("public")
}

enum MessageType {
  customer_message
  admin_message
  system_message
  @@schema("public")
}

// ==========================
// SUPPORT SYSTEM MODELS
// ==========================

// Support Kategorileri
model SupportCategory {
  id          String   @id @default(uuid())
  name        Json     // {"tr": "Teknik Destek", "en": "Technical Support"}
  description Json?    // {"tr": "Açıklama", "en": "Description"}
  icon        String?  // Lucide icon name
  color       String?  // Tailwind color class
  isActive    Boolean  @default(true)
  order       Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  tickets     SupportTicket[]
  
  @@index([isActive])
  @@index([order])
  @@schema("public")
}

// Support Ticket
model SupportTicket {
  id              String         @id @default(uuid())
  ticketNumber    String         @unique // AUTO-GENERATED: TKT-202501-001
  title           String
  description     String         @db.Text
  status          TicketStatus   @default(open)
  priority        TicketPriority @default(medium)
  categoryId      String?
  customerId      String         // User who created the ticket
  assignedToId    String?        // Admin assigned to handle
  
  // Metadata
  tags            String[]       // Etiketler
  metadata        Json?          // Ek bilgiler
  
  // Timestamps
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  resolvedAt      DateTime?      // Çözüm zamanı
  closedAt        DateTime?      // Kapatma zamanı
  firstResponseAt DateTime?      // İlk yanıt zamanı
  lastMessageAt   DateTime?      // Son mesaj zamanı
  
  // Stats
  messageCount    Int            @default(0)
  attachmentCount Int            @default(0)
  viewCount       Int            @default(0)
  
  // Relations
  category        SupportCategory?       @relation(fields: [categoryId], references: [id])
  customer        User                   @relation("CustomerTickets", fields: [customerId], references: [id])
  assignedTo      User?                  @relation("AssignedTickets", fields: [assignedToId], references: [id])
  messages        SupportMessage[]
  attachments     SupportAttachment[]
  assignments     TicketAssignment[]
  notifications   TicketNotification[]
  
  @@index([status])
  @@index([priority])
  @@index([customerId])
  @@index([assignedToId])
  @@index([categoryId])
  @@index([createdAt])
  @@index([ticketNumber])
  @@schema("public")
}

// Support Mesajları
model SupportMessage {
  id           String      @id @default(uuid())
  ticketId     String
  senderId     String
  messageType  MessageType @default(customer_message)
  content      String      @db.Text
  
  // Metadata
  isRead       Boolean     @default(false)
  isEdited     Boolean     @default(false)
  editedAt     DateTime?
  metadata     Json?       // Ek bilgiler (IP, browser info vb.)
  
  // Timestamps
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  readAt       DateTime?
  
  // Relations
  ticket       SupportTicket          @relation(fields: [ticketId], references: [id], onDelete: Cascade)
  sender       User                   @relation("SentMessages", fields: [senderId], references: [id])
  attachments  SupportAttachment[]
  
  @@index([ticketId])
  @@index([senderId])
  @@index([createdAt])
  @@index([isRead])
  @@schema("public")
}

// Dosya Eklentileri
model SupportAttachment {
  id          String          @id @default(uuid())
  ticketId    String?
  messageId   String?
  uploadedById String
  
  // File info
  fileName    String
  fileType    String          // MIME type
  fileSize    Int             // Bytes
  filePath    String          // Storage path
  fileUrl     String?         // Public URL
  
  // Metadata
  metadata    Json?           // Ek bilgiler
  
  // Timestamps
  createdAt   DateTime        @default(now())
  
  // Relations
  ticket      SupportTicket?  @relation(fields: [ticketId], references: [id], onDelete: Cascade)
  message     SupportMessage? @relation(fields: [messageId], references: [id], onDelete: Cascade)
  uploadedBy  User            @relation("UploadedAttachments", fields: [uploadedById], references: [id])
  
  @@index([ticketId])
  @@index([messageId])
  @@index([uploadedById])
  @@schema("public")
}

// Ticket Atama Geçmişi
model TicketAssignment {
  id           String        @id @default(uuid())
  ticketId     String
  assignedToId String?       // NULL = unassigned
  assignedById String
  reason       String?       // Atama nedeni
  note         String?       // Atama notu
  
  // Timestamps
  createdAt    DateTime      @default(now())
  
  // Relations
  ticket       SupportTicket @relation(fields: [ticketId], references: [id], onDelete: Cascade)
  assignedTo   User?         @relation("AssignmentTarget", fields: [assignedToId], references: [id])
  assignedBy   User          @relation("AssignmentCreator", fields: [assignedById], references: [id])
  
  @@index([ticketId])
  @@index([assignedToId])
  @@index([createdAt])
  @@schema("public")
}

// Ticket Bildirimleri
model TicketNotification {
  id           String        @id @default(uuid())
  ticketId     String
  userId       String        // Bildirimi alacak kullanıcı
  type         String        // new_message, status_change, assignment vb.
  title        String
  content      String?
  
  // Status
  isRead       Boolean       @default(false)
  isEmailSent  Boolean       @default(false)
  isPushSent   Boolean       @default(false)
  
  // Timestamps
  createdAt    DateTime      @default(now())
  readAt       DateTime?
  
  // Relations
  ticket       SupportTicket @relation(fields: [ticketId], references: [id], onDelete: Cascade)
  user         User          @relation("TicketNotifications", fields: [userId], references: [id])
  
  @@index([userId])
  @@index([ticketId])
  @@index([isRead])
  @@index([createdAt])
  @@schema("public")
}

// DB merkezli pathname çevirileri
model I18nRoute {
  id          String   @id @default(uuid())
  name        String   @unique // Örn: "/landing/contact"
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  translations I18nRouteTranslation[]

  @@schema("public")
}

model I18nRouteTranslation {
  id         String   @id @default(uuid())
  routeName  String
  localeCode String
  path       String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  route I18nRoute @relation(fields: [routeName], references: [name], onDelete: Cascade)

  @@unique([routeName, localeCode])
  @@schema("public")
}
