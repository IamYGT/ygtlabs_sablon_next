import prisma from "@/lib/prisma";
import { NextResponse } from "next/server";
import fs from "node:fs/promises";
import path from "node:path";

const GENERATED_FILE = path.join(
  process.cwd(),
  "lib",
  "i18n",
  "locales.generated.ts"
);

async function writeLocalesFile(locales: string[], defaultLocale: string) {
  const contents = `// This file is auto-generated by the i18n admin APIs.\n// Do not edit manually. Use the admin language management UI.\n\nexport const locales: readonly string[] = ${JSON.stringify(
    locales
  )} as const;\nexport const defaultLocale: string = ${JSON.stringify(
    defaultLocale
  )};\n\nexport default locales;\n`;
  await fs.mkdir(path.dirname(GENERATED_FILE), { recursive: true });
  await fs.writeFile(GENERATED_FILE, contents, "utf8");
}

export async function POST() {
  // Generate locales file from DB using Prisma Client
  const rows = await prisma.language.findMany({
    where: { isActive: true },
    orderBy: [{ isDefault: "desc" }, { code: "asc" }],
    select: { code: true, isDefault: true },
  });
  if (!rows || rows.length === 0) {
    await writeLocalesFile(["en"], "en");
    return NextResponse.json({ locales: ["en"], defaultLocale: "en" });
  }
  const locales = rows.map((r) => r.code);
  const defaultRow = rows.find((r) => r.isDefault) ?? rows[0];
  const defaultLocale = defaultRow.code;
  await writeLocalesFile(locales, defaultLocale);
  return NextResponse.json({ locales, defaultLocale });
}
